import { Head } from "$fresh/runtime.ts";
import { Handlers, PageProps } from "$fresh/server.ts";
import { AnalyticsService } from "@/analytics/analytics.service.ts";
import { PostService } from "@/blog/post.service.ts";
import { Post } from "@/blog/post.ts";
import { ArticleLead } from "@/components/articles/lead.tsx";
import { TableOfContents } from "@/components/articles/table-of-contents.tsx";
import { Header } from "@/components/header.tsx";
import { VectorIllustration } from "@/islands/articles/flow-field-variety/vector.tsx";

export const handler: Handlers<Post> = {
	async GET(req, ctx) {
		const url = import.meta.url.split("/").pop() as string;
		try {
			const post = await PostService.getPost(url.replace(".tsx", ""));
			AnalyticsService.readPost(post.slug, req.headers.get("Referer"));
			return ctx.render(post as Post);
		} catch {
			return ctx.renderNotFound();
		}
	},
};

const tableOfContents = [
	{ id: "brief-introduction", label: "Brief introduction" },
	{ id: "vectors", label: "Vectors" },
];

export default function PostPage({ data: post }: PageProps<Post>) {
	return (
		<>
			<Head>
				<title>{post.title}</title>
				<link
					rel="stylesheet"
					href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/base16/ros-pine-dawn.min.css"
				/>

				<link
					rel="stylesheet"
					media="(prefers-color-scheme: dark)"
					href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/base16/ros-pine.min.css"
				/>

				<meta name="description" content={post.snippet} />
				<meta property="og:title" content={post.title} />
				<meta property="og:description" content={post.snippet} />
				{post.ogImageUrl ? (
					<meta property="og:image" content={post.ogImageUrl} />
				) : (
					<></>
				)}
			</Head>
			<Header />
			<article className="max-w-prose m-auto font-display p-8 sm:p-0">
				<ArticleLead post={post} />
				<blockquote>
					There are fun interactive illustrations in this one too, feel free to
					skip all the text and play around.
					<figcaption>-- Me.</figcaption>
				</blockquote>
				<section className="py-8">
					<h2>Table of contents</h2>
					<TableOfContents items={tableOfContents} />
				</section>
				<h2 id="brief-introduction">Brief Introduction</h2>
				<p>
					This article is a continuation of a previous post about{" "}
					<a href="flow-field-methods">
						what I've learned about flow field methods so far
					</a>
					. While that article focused on the basic techniques of how to achieve
					the overall effect of a these types of images, this article will dive
					deeper into how you can go about constructing your own vector fields
					that guide the direction of the image and some other techniques that
					add a bit more variety.
				</p>
				<h2 id="vectors">Vectors</h2>
				<p>
					Last time we drew a field of vectors generated by a noise function by
					smoothing out the noise values. In the end that can get a bit boring
					as the final vector field that is generated will always look pretty
					samey, no matter what the seed of the noise funciton is.
				</p>
				<p>
					We can add some extra variety to this by creating our own vector
					fields with the tinest bit of vector math. I'm not a big city hot shot
					mathematician, but visualising what is happening does help if you
					already have a final output in mind, then you can work backwards
					toward the function that yields that image.
				</p>
				<VectorIllustration />
			</article>
		</>
	);
}
